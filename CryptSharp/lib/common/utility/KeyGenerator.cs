namespace CryptSharp.lib.common.utility {
    /// <summary>
    /// Key generation via PBKDF2 and for RSA.
    /// </summary>
    public class KeyGenerator {
        /// <summary>
        /// Simple method to get PBKDF2.
        /// </summary>
        /// <param name="inKey">Input key bytes</param>
        /// <param name="inSalt">Input salt bytes</param>
        /// <param name="inIterations">Iterations of PBKDF2</param>
        /// <returns>Rfc2898DeriveBytes-class</returns>
        public System.Security.Cryptography.Rfc2898DeriveBytes getPBKDF2(byte[] inKey = null, byte[] inSalt = null, int inIterations = 1000) {
            inKey = inKey ?? new byte[] { };
            inSalt = inSalt ?? new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            return new System.Security.Cryptography.Rfc2898DeriveBytes(inKey, inSalt, inIterations);
        }

        /// <summary>
        /// Generates a PBKDF2-based pseudo-rng byte array.
        /// </summary>
        /// <param name="outLength">Length of generated byte array</param>
        /// <param name="inKey">Input key bytes</param>
        /// <param name="inSalt">Input salt bytes</param>
        /// <param name="inIterations">Iterations of PBKDF2</param>
        /// <returns>pseudo-rng byte array</returns>
        public byte[] getPBKDF2_Bytes(int outLength, byte[] inKey = null, byte[] inSalt = null, int inIterations = 1000) {
            inKey = inKey ?? new byte[] { };
            inSalt = inSalt ?? new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
            return new System.Security.Cryptography.Rfc2898DeriveBytes(inKey, inSalt, inIterations).GetBytes(outLength);
        }

        /// <summary>
        /// Generates a new RSA key pair.
        /// </summary>
        /// <param name="includePrivateKey">Key contains private key</param>
        /// <param name="keySize">Requested key size</param>
        /// <returns>RSA key information</returns>
        public System.Security.Cryptography.RSAParameters generateRSAKeyInformation(bool includePrivateKey = true, int keySize = 2048) {
            System.Security.Cryptography.RSACryptoServiceProvider RSACSP = new System.Security.Cryptography.RSACryptoServiceProvider(keySize);
            return RSACSP.ExportParameters(includePrivateKey);
        }

        /// <summary>
        /// Generates a new RSA key pair as xml string.
        /// </summary>
        /// <param name="includePrivateKey">Key contains private key</param>
        /// <param name="keySize">Requested key size</param>
        /// <returns>RSA key information as xml string</returns>
        public string generateRSAKeyInformationXML(bool includePrivateKey = true, int keySize = 2048) {
            System.Security.Cryptography.RSACryptoServiceProvider RSACSP = new System.Security.Cryptography.RSACryptoServiceProvider(keySize);
            return RSACSP.ToXmlString(includePrivateKey);
        }
    }
}